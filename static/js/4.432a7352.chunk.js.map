{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.scss","containers/Auth/Auth.module.scss","containers/Auth/Auth.js"],"names":["input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","inputType","name","onChange","changed","className","join","elementConfig","value","options","map","option","key","displayValue","Input","Label","label","module","exports","connect","state","loading","auth","error","isAuthenticated","token","buildingBurger","burgerBuilder","building","authRedirectPath","dispatch","onAuth","email","password","isSignup","actions","onSetAuthRedirectPath","useState","elementType","type","placeholder","validation","required","isEmail","valid","minLength","authForm","setAuthForm","setIsSignup","useEffect","checkValidity","rules","isValid","trim","length","maxLength","test","inputChangedHandler","evt","updatedControls","target","formElementsArray","id","config","form","onSubmit","event","preventDefault","formElement","btnType","errorMessage","message","Auth","to","style","display","clicked"],"mappings":"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","file":"static/js/4.432a7352.chunk.js","sourcesContent":["import React from \"react\";\r\nimport classes from \"./Input.module.scss\"\r\n\r\nconst input = (props) =>{\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n\r\n    if(props.invalid && props.shouldValidate && props.touched){\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n\r\n    switch(props.inputType) {\r\n        case('input'):\r\n            inputElement=<input\r\n                            name={props.name} \r\n                            onChange={props.changed}\r\n                            className={inputClasses.join(\" \")} \r\n                            {...props.elementConfig}\r\n                            value={props.value}/>\r\n            break;\r\n        case('textarea'):\r\n            inputElement=<textarea \r\n                            name={props.name}\r\n                            onChange={props.changed}\r\n                            className={inputClasses.join(\" \")} \r\n                            {...props.elementConfig}\r\n                            value={props.value}/>\r\n            break;\r\n        case('select'):\r\n            inputElement=<select\r\n                            name={props.name}\r\n                            className={inputClasses.join(\" \")}\r\n                            onChange={props.changed} \r\n                            value={props.value}>\r\n                            {props.elementConfig.options.map(option => (\r\n                                <option onChange={props.changed} key={option.value} value={option.value}>\r\n                                    {option.displayValue}\r\n                                </option>\r\n                            ))}\r\n                        </select>\r\n        break;\r\n        default:\r\n            inputElement=<input \r\n                            name={props.name}\r\n                            onChange={props.changed}\r\n                            className={inputClasses.join(\" \")} \r\n                            {...props.elementConfig}\r\n                            value={props.value}/>\r\n    }\r\n    return(\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2-wum\",\"Label\":\"Input_Label__ZJRXp\",\"InputElement\":\"Input_InputElement__2fvy4\",\"Invalid\":\"Input_Invalid__21T0E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1r18q\"};","import React, { useState, useEffect } from 'react';\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport Button from \"../../components/UI/Buttons/Button\";\r\nimport classes from \"./Auth.module.scss\"\r\nimport * as actions from \"../../store/actions/index\"\r\nimport {connect} from \"react-redux\"\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\"\r\nimport { Redirect } from \"react-router-dom\"\r\n\r\nconst Auth = props => {\r\n    const[authForm, setAuthForm] = useState({\r\n            email: {\r\n                elementType: \"input\",\r\n                elementConfig: {\r\n                    type: \"email\",\r\n                    placeholder: \"Mail Adress\"\r\n                },\r\n                value: \"\",\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: \"input\",\r\n                elementConfig: {\r\n                    type: \"password\",\r\n                    placeholder: \"Password\"\r\n                },\r\n                value: \"\",\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        });\r\n        const [isSignup, setIsSignup] = useState(true)\r\n\r\n    const {buildingBurger, authRedirectPath} = props;\r\n    useEffect(()=>{\r\n        if(!props.buildingBurger&&props.authRedirectPath !== \"/\"){\r\n            props.onSetAuthRedirectPath();\r\n        }\r\n    }, [buildingBurger, authRedirectPath])\r\n\r\n    const checkValidity = (value, rules) =>{\r\n        let isValid=true;\r\n        if(rules.required){\r\n            isValid=value.trim()!==\"\" && isValid;\r\n        }\r\n        if(rules.minLength){\r\n            isValid=value.length >= rules.minLength && isValid;\r\n        }\r\n        if(rules.maxLength){\r\n            isValid=value.length <= rules.minLength && isValid;\r\n        }\r\n        if (rules.isEmail) {\r\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n            isValid = pattern.test(value) && isValid\r\n        }\r\n        return isValid;\r\n    }\r\n\r\n    const inputChangedHandler = (evt) => {\r\n        const updatedControls = {\r\n            ...authForm,\r\n            [evt.target.name]: {\r\n                ...authForm[evt.target.name],\r\n                value: evt.target.value,\r\n                valid: checkValidity(evt.target.value, authForm[evt.target.name].validation),\r\n                touched: true\r\n            }\r\n        }\r\n        setAuthForm(updatedControls)\r\n    }\r\n\r\n    const submitHandler = (event) =>{\r\n        event.preventDefault();\r\n        props.onAuth(authForm.email.value, authForm.password.value, isSignup);\r\n    }\r\n\r\n    const switchAuthModeHandler = () =>{\r\n        setIsSignup(!isSignup)\r\n    }\r\n\r\n        const formElementsArray = [];\r\n        for(let key in authForm){\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: authForm[key]\r\n            })\r\n        }\r\n        let form = (<>\r\n                    <form onSubmit={submitHandler}>\r\n                        {formElementsArray.map(formElement => (\r\n                            <Input \r\n                                touched={formElement.config.touched}\r\n                                invalid={!formElement.config.valid}\r\n                                inputType={formElement.config.elementType}\r\n                                elementConfig={formElement.config.elementConfig}\r\n                                shouldValidate={formElement.config.validation}\r\n                                value={formElement.config.value}\r\n                                changed={inputChangedHandler}\r\n                                key={formElement.id}\r\n                                name={formElement.id}/>\r\n                        ))}\r\n                        <Button btnType=\"Success\">SUBMIT</Button>  \r\n                    </form>\r\n                    </>);\r\n        if(props.loading){\r\n            form=<Spinner />\r\n        }\r\n\r\n        let errorMessage = null;\r\n        if(props.error){\r\n            errorMessage = <p>{props.error.message}</p>\r\n        }\r\n        return (\r\n            <div className={classes.Auth}>\r\n                {props.isAuthenticated ? <Redirect to={props.authRedirectPath} /> : null}\r\n                {errorMessage}\r\n                {form}\r\n                <Button \r\n                    style={{display: \"block\"}}\r\n                    clicked={switchAuthModeHandler}\r\n                    btnType=\"Danger\">SWITCH TO {isSignup?\"SIGNIN\":\"SIGNUP\"}</Button>\r\n            </div>\r\n        );\r\n}\r\n\r\nconst mapDispatchToProps = dispatch =>{\r\n    return{\r\n        onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\r\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath(\"/\"))\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state =>{\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        buildingBurger: state.burgerBuilder.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);"],"sourceRoot":""}