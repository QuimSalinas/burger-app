{"version":3,"sources":["components/Order/CheckOutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.scss","components/Order/CheckOutSummary/CheckoutSummary.module.scss","containers/Checkout/ContactData/ContactData.module.scss"],"names":["checkoutSummary","props","className","classes","CheckoutSummary","style","width","Burger","ingredients","Button","btnType","clicked","checkoutCancel","checkoutContinue","connect","state","ings","burgerBuilder","price","totalPrice","loading","order","token","auth","userId","dispatch","onOrderBurger","orderData","actions","withErrorHandler","useState","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","orderForm","setOrderForm","formIsValid","setFormIsValid","inputChangedHandler","evt","newForm","updatedFormElement","target","rules","isValid","trim","length","checkValidity","key","orderHandler","event","preventDefault","formData","formElementIdentifyer","formElementsArray","push","id","config","form","onSubmit","map","formElement","Input","invalid","inputType","shouldValidate","changed","disabled","Spinner","ContactData","axios","purchased","summary","to","purchasedRedirect","history","goBack","replace","path","match","component","input","inputElement","inputClasses","InputElement","Invalid","onChange","join","option","Label","label","module","exports"],"mappings":"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","file":"static/js/3.b90c33e0.chunk.js","sourcesContent":["import React from \"react\"\r\nimport Burger from \"../../Burger/Burger\"\r\nimport Button from \"../../UI/Buttons/Button\"\r\nimport classes from \"./CheckoutSummary.module.scss\"\r\n\r\nconst checkoutSummary = (props) =>{\r\n    return (\r\n        <div className={classes.CheckoutSummary}>\r\n            <h1>We hope it tastes well!</h1>\r\n            <div style={{width:\"100%\"}}>\r\n                <Burger ingredients={props.ingredients}/>\r\n            </div>\r\n            <Button btnType=\"Danger\" clicked={props.checkoutCancel}>CANCEL</Button>\r\n            <Button btnType=\"Success\" clicked={props.checkoutContinue}>CONTINUE</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default checkoutSummary;","import React, { useState } from 'react';\r\nimport Button from \"../../../components/UI/Buttons/Button\"\r\nimport classes from \"./ContactData.module.scss\"\r\nimport axios from \"../../../axios\"\r\nimport Spinner from \"../../../components/UI/Spinner/Spinner\"\r\nimport Input from \"../../../components/UI/Input/Input\"\r\nimport { connect } from \"react-redux\"\r\nimport withErrorHandler from \"../../../hoc/WithErrorHandler/withErrorHandler\"\r\nimport * as actions from \"../../../store/actions/index\"\r\n\r\nconst ContactData = props => {\r\n    const [orderForm, setOrderForm] = useState({\r\n        name: {\r\n                elementType: \"input\",\r\n                elementConfig: {\r\n                    type: \"text\",\r\n                    placeholder: \"Your Name\"\r\n                },\r\n                value: \"\",\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n        },\r\n        street: {\r\n            elementType: \"input\",\r\n            elementConfig: {\r\n                type: \"text\",\r\n                placeholder: \"Street\"\r\n            },\r\n            value: \"\",\r\n            validation: {\r\n                required: true\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        zipCode: {\r\n            elementType: \"input\",\r\n            elementConfig: {\r\n                type: \"text\",\r\n                placeholder: \"Zip Code\"\r\n            },\r\n            value: \"\",\r\n            validation: {\r\n                required: true,\r\n                minLength: 5,\r\n                maxLength: 5\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        country: {\r\n            elementType: \"input\",\r\n            elementConfig: {\r\n                type: \"text\",\r\n                placeholder: \"Country\"\r\n            },\r\n            value: \"\",\r\n            validation: {\r\n                required: true\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        email: {\r\n            elementType: \"input\",\r\n            elementConfig: {\r\n                type: \"email\",\r\n                placeholder: \"Your E-mail\"\r\n            },\r\n            value: \"\",\r\n            validation: {\r\n                required: true\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        deliveryMethod: {\r\n            elementType: \"select\",\r\n            elementConfig: {\r\n                options: [{value: \"fastest\", displayValue: \"Fastest\"},\r\n                            {value: \"cheapest\", displayValue: \"Cheapest\"}]\r\n            },\r\n            value: \"fastest\",\r\n            validation: {},\r\n            valid: true\r\n        }});\r\n    const [formIsValid, setFormIsValid] = useState(false);\r\n    \r\n\r\n    const checkValidity = (value, rules) => {\r\n        let isValid=true;\r\n        if(rules.required){\r\n            isValid=value.trim()!==\"\" && isValid;\r\n        }\r\n        if(rules.minLength){\r\n            isValid=value.length >= rules.minLength && isValid;\r\n        }\r\n        if(rules.maxLength){\r\n            isValid=value.length <= rules.minLength && isValid;\r\n        }\r\n        return isValid;\r\n    }\r\n\r\n    const inputChangedHandler = (evt) => {\r\n        const newForm = {...orderForm};\r\n        const updatedFormElement = {...newForm[evt.target.name]}\r\n        updatedFormElement.value = evt.target.value;\r\n        updatedFormElement.valid=checkValidity(updatedFormElement.value, updatedFormElement.validation);\r\n        updatedFormElement.touched=true;\r\n        newForm[evt.target.name] = updatedFormElement;\r\n\r\n        let formIsValid=true;\r\n        for(let key in newForm){\r\n            formIsValid = newForm[key].valid&&formIsValid;\r\n        }\r\n        setOrderForm(newForm);\r\n        setFormIsValid(formIsValid)\r\n    }\r\n\r\n    const orderHandler = (event) =>{\r\n        event.preventDefault();\r\n        const formData = {};\r\n        for(let formElementIdentifyer in orderForm){\r\n            formData[formElementIdentifyer]=orderForm[formElementIdentifyer].value\r\n        };\r\n        const order = {\r\n                ingredients: props.ings,\r\n                price: props.price,\r\n                orderData: formData,\r\n                userId: props.userId\r\n        };\r\n        props.onOrderBurger(order, props.token);\r\n    }\r\n\r\n        const formElementsArray = [];\r\n        for(let key in orderForm){\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: orderForm[key]\r\n            })\r\n        }\r\n        let form = (<>\r\n                    <h4>Enter your contact data</h4>\r\n                    <form onSubmit={orderHandler}>\r\n                        {formElementsArray.map(formElement => (\r\n                            <Input \r\n                                touched={formElement.config.touched}\r\n                                invalid={!formElement.config.valid}\r\n                                inputType={formElement.config.elementType}\r\n                                elementConfig={formElement.config.elementConfig}\r\n                                shouldValidate={formElement.config.validation}\r\n                                value={formElement.config.value}\r\n                                changed={inputChangedHandler}\r\n                                key={formElement.id}\r\n                                name={formElement.id}/>\r\n                        ))}\r\n                        <Button disabled={!formIsValid} btnType=\"Success\" clicked={orderHandler}>ORDER</Button>    \r\n                    </form>\r\n                    </>);\r\n        if(props.loading) form = <Spinner />\r\n        return (\r\n            <div className={classes.ContactData}>\r\n                {form}\r\n            </div>\r\n        );\r\n}\r\n\r\nconst mapStateToProps = state =>{\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\r\n    };   \r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React from 'react';\r\nimport CheckoutSummary from \"../../components/Order/CheckOutSummary/CheckoutSummary\"\r\nimport { Route, Redirect } from \"react-router-dom\"\r\nimport ContactData from \"./ContactData/ContactData\"\r\nimport {connect} from \"react-redux\"\r\n\r\nconst Checkout = props => {\r\n\r\n    const checkoutCancelledHandler = () =>{\r\n        props.history.goBack();\r\n    }\r\n\r\n    const checkoutContinueHandler = () =>{\r\n        props.history.replace(\"/checkout/contact-data\")\r\n    }\r\n    let summary = <Redirect to=\"/\"/>\r\n    if(props.ings){\r\n        const purchasedRedirect = props.purchased ? <Redirect to=\"/\" /> : null;\r\n        summary=<>\r\n                    {purchasedRedirect}\r\n                    <CheckoutSummary ingredients={props.ings} \r\n                                    checkoutCancel={checkoutCancelledHandler} \r\n                                    checkoutContinue={checkoutContinueHandler}/>\r\n                    <Route  path={props.match.path  + '/contact-data'} \r\n                            component={ContactData}/>\r\n                </>\r\n    }\r\n    return (\r\n        <div>\r\n            {summary} \r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state =>{\r\n    return{\r\n        ings: state.burgerBuilder.ingredients,\r\n        purchased: state.order.purchased\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Checkout);","import React from \"react\";\r\nimport classes from \"./Input.module.scss\"\r\n\r\nconst input = (props) =>{\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n\r\n    if(props.invalid && props.shouldValidate && props.touched){\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n\r\n    switch(props.inputType) {\r\n        case('input'):\r\n            inputElement=<input\r\n                            name={props.name} \r\n                            onChange={props.changed}\r\n                            className={inputClasses.join(\" \")} \r\n                            {...props.elementConfig}\r\n                            value={props.value}/>\r\n            break;\r\n        case('textarea'):\r\n            inputElement=<textarea \r\n                            name={props.name}\r\n                            onChange={props.changed}\r\n                            className={inputClasses.join(\" \")} \r\n                            {...props.elementConfig}\r\n                            value={props.value}/>\r\n            break;\r\n        case('select'):\r\n            inputElement=<select\r\n                            name={props.name}\r\n                            className={inputClasses.join(\" \")}\r\n                            onChange={props.changed} \r\n                            value={props.value}>\r\n                            {props.elementConfig.options.map(option => (\r\n                                <option onChange={props.changed} key={option.value} value={option.value}>\r\n                                    {option.displayValue}\r\n                                </option>\r\n                            ))}\r\n                        </select>\r\n        break;\r\n        default:\r\n            inputElement=<input \r\n                            name={props.name}\r\n                            onChange={props.changed}\r\n                            className={inputClasses.join(\" \")} \r\n                            {...props.elementConfig}\r\n                            value={props.value}/>\r\n    }\r\n    return(\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2-wum\",\"Label\":\"Input_Label__ZJRXp\",\"InputElement\":\"Input_InputElement__2fvy4\",\"Invalid\":\"Input_Invalid__21T0E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__20GHp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__3yn9t\"};"],"sourceRoot":""}